<?php

use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use PHPUnit\Framework\TestCase;
use Sentry\State\Hub;
use Sentry\State\HubInterface;
use SportMob\Translation\Client;
use SportMob\Translation\CacheAdapter;

class ClientTest extends TestCase
{
    private array $repsonseMock = [
        "Real Madrid" => [
            "fa" => "رئال مادرید"
        ]
    ];
    private HubInterface $sentryHub;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->sentryHub = $this->getMockBuilder(HubInterface::class)->getMock();
    }

    public function testGetByLangMustCallTranslationServiceApi()
    {
        (new CacheAdapter('redis'))->flushAll();

        $mock = new MockHandler([
            new Response(200, [], json_encode($this->repsonseMock)),
        ]);
        $handlerStack = HandlerStack::create($mock);
        $client = new Client('', 'redis', 6379, $this->sentryHub, $handlerStack);
        $response = $client->getByLang("Real Madrid", "fa");

        $this->assertEquals($this->repsonseMock['Real Madrid']['fa'], $response);

        $cacheAdapter = new CacheAdapter('redis');

        $cacheKey = Client::translateFormatKey('Real Madrid', 'fa');

        // check cache
        $this->assertEquals($cacheAdapter->get($cacheKey), $response);
    }

    public function testGetByLangMustUseCacheInsteadOfTranslationServiceApi()
    {
        $responseMock = $this->repsonseMock;
        $responseMock['Real Madrid']['fa'] = 'Meysam';
        $mock = new MockHandler([
            new Response(200, [], json_encode($responseMock)),
        ]);
        $handlerStack = HandlerStack::create($mock);
        $client = new Client('', 'redis', 6379, $this->sentryHub, $handlerStack);

        // this request must read data from cache
        $response = $client->getByLang('Real Madrid', 'fa');

        $this->assertEquals($this->repsonseMock['Real Madrid']['fa'], $response);
    }

    public function testGetByLangMustCallMissKeywordFromTranslationServiceApi()
    {
        // remove a key from cache
        $del = (new CacheAdapter('redis'))->del(Client::translateFormatKey('Real Madrid', 'fa'));
        $this->assertTrue($del);

        $responseMock = $this->repsonseMock;
        $responseMock['Real Madrid']['fa'] = 'Meysam';
        $mock = new MockHandler([
            new Response(200, [], json_encode($responseMock)),
        ]);
        $handlerStack = HandlerStack::create($mock);
        $client = new Client('', 'redis', 6379, $this->sentryHub, $handlerStack);

        // this request must read data from server
        $response = $client->getByLang('Real Madrid', 'fa');

        $this->assertNotEquals($this->repsonseMock['Real Madrid']['fa'], $response);
    }

    public function testGetByLangMustReturnEnglishIfServerIsDown()
    {
        (new CacheAdapter('redis'))->flushAll();
        $client = new Client('', 'redis', 6379,  $this->sentryHub);
        $response = $client->getByLang('Real Madrid', 'fa');

        $this->assertIsString($response);
        $this->assertEquals('Real Madrid', $response);
    }

    public function testGetByLangMustReturnEnglishIfLangIsEn()
    {
        $client = new Client('', 'redis', 6379,  $this->sentryHub);
        $response = $client->getByLang('Real Madrid', 'en');

        $this->assertIsString($response);
        $this->assertEquals('Real Madrid', $response);
    }

    public function testGetAllMustCallTranslationServiceApi()
    {
        (new CacheAdapter('redis'))->flushAll();

        $mock = new MockHandler([
            new Response(200, [], json_encode($this->repsonseMock['Real Madrid'])),
        ]);
        $handlerStack = HandlerStack::create($mock);
        $client = new Client('', 'redis', 6379, $this->sentryHub, $handlerStack);
        $response = $client->getAll("Real Madrid");

        $this->assertEquals($this->repsonseMock['Real Madrid'], $response);

        // check cache
        $cacheAdapter = new CacheAdapter('redis');
        $cacheKey = Client::translateFormatKey('Real Madrid', 'all');
        $cacheResult = $cacheAdapter->get($cacheKey);
        $this->assertNotNull($cacheResult);
        $this->assertEquals(unserialize($cacheResult), $response);
    }

    public function testGetAllMustUseCacheInsteadOfTranslationServiceApi()
    {
        $responseMock = $this->repsonseMock;
        $responseMock['Real Madrid']['fa'] = 'Meysam';
        $mock = new MockHandler([
            new Response(200, [], json_encode($responseMock['Real Madrid'])),
        ]);
        $handlerStack = HandlerStack::create($mock);
        $client = new Client('', 'redis', 6379, $this->sentryHub, $handlerStack);

        // this request must read data from cache
        $response = $client->getAll('Real Madrid');

        $this->assertEquals($this->repsonseMock['Real Madrid'], $response);
    }

    public function testSearchMustCallTranslationServiceApi()
    {
        (new CacheAdapter('redis'))->flushAll();
        $strAr = 'ريال مدريد';
        $respondMock = ['Real Madrid CF', 'Real Madrid'];
        $mock = new MockHandler([
            new Response(200, [], json_encode($respondMock)),
        ]);
        $handlerStack = HandlerStack::create($mock);
        $client = new Client('', 'redis', 6379, $this->sentryHub, $handlerStack);
        $response = $client->search($strAr, 'ar');

        $this->assertEquals($respondMock, $response);

        // check cache
        $cacheAdapter = new CacheAdapter('redis');
        $cache = json_decode($cacheAdapter->get(Client::searchFormatKey($strAr, 'ar')), true); // convert string to array
        $this->assertEquals($cache, $respondMock);
    }

    public function testSearchMustCallReturnEmptyArrayIfServerIsDown()
    {
        (new CacheAdapter('redis'))->flushAll();
        $client = new Client('', 'redis', 6379,  $this->sentryHub);

        $strAr = 'ريال مدريد';
        $response = $client->search($strAr, 'ar');

        $this->assertCount(0, $response);
    }
}