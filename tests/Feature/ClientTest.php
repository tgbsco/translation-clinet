<?php

use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use PHPUnit\Framework\TestCase;
use Sentry\State\Hub;
use Sentry\State\HubInterface;
use SportMob\Translation\Client;
use SportMob\Translation\CacheAdapter;

class ClientTest extends TestCase
{
    private string $sportmobId = 'qweasdzxcv';
    private array $repsonseMock = [
        "translation" => "ريال مدريد",
        "lang" => "ar",
    ];
    private HubInterface $sentryHub;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->sentryHub = $this->getMockBuilder(HubInterface::class)->getMock();
    }

    public function testGetByLangMustCallTranslationServiceApi()
    {
        (new CacheAdapter('redis'))->flushAll();

        $mock = new MockHandler([
            new Response(200, [], json_encode($this->repsonseMock)),
        ]);
        $handlerStack = HandlerStack::create($mock);
        $client = new Client('', 'redis', 6379, $this->sentryHub, $handlerStack);
        $response = $client->getByEntityId($this->sportmobId, $this->repsonseMock['lang']);

        $this->assertEquals($this->repsonseMock['translation'], $response);

        $cacheAdapter = new CacheAdapter('redis');

        $cacheKey = Client::translateFormatKey($this->sportmobId, $this->repsonseMock['lang']);

        // check cache
        $this->assertEquals($cacheAdapter->get($cacheKey), $response);
    }

    public function testGetByLangMustUseCacheInsteadOfTranslationServiceApi()
    {
        $responseMock = $this->repsonseMock;
        $repsonseMock['translation'] = 'Meysam';
        $mock = new MockHandler([
            new Response(200, [], json_encode($responseMock)),
        ]);
        $handlerStack = HandlerStack::create($mock);
        $client = new Client('', 'redis', 6379, $this->sentryHub, $handlerStack);

        // this request must read data from cache
        $response = $client->getByEntityId($this->sportmobId, $this->repsonseMock['lang']);

        $this->assertEquals($this->repsonseMock['translation'], $response);
    }

    public function testGetByLangMustCallMissKeywordFromTranslationServiceApi()
    {
        // remove a key from cache
        $del = (new CacheAdapter('redis'))->del(
            Client::translateFormatKey($this->sportmobId, $this->repsonseMock['lang']));
        $this->assertTrue($del);

        $responseMock = $this->repsonseMock;
        $repsonseMock['translation'] = 'Meysam';
        $mock = new MockHandler([
            new Response(200, [], json_encode($responseMock)),
        ]);
        $handlerStack = HandlerStack::create($mock);
        $client = new Client('', 'redis', 6379, $this->sentryHub, $handlerStack);

        // this request must read data from server
        $response = $client->getByEntityId($this->sportmobId, $this->repsonseMock['lang']);

        $this->assertNotEquals($this->repsonseMock['Real Madrid']['fa'], $response);
    }
}